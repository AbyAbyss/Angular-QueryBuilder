{"version":3,"sources":["webpack:///./lib/components/index.js","webpack:///./lib/components/query-builder/index.js","webpack:///./lib/components/query-builder/query-arrow-icon.directive.js","webpack:///./lib/components/query-builder/query-builder.component.js","webpack:///./lib/components/query-builder/query-button-group.directive.js","webpack:///./lib/components/query-builder/query-empty-warning.directive.js","webpack:///./lib/components/query-builder/query-entity.directive.js","webpack:///./lib/components/query-builder/query-field.directive.js","webpack:///./lib/components/query-builder/query-input.directive.js","webpack:///./lib/components/query-builder/query-operator.directive.js","webpack:///./lib/components/query-builder/query-remove-button.directive.js","webpack:///./lib/components/query-builder/query-switch-group.directive.js","webpack:///./lib/index.js","webpack:///./lib/query-builder.module.js","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,iC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;;;;ACViC;AACjC;AACA;AACA;AACA;AACA;AACA,SAAS,wEAA0B,+BAA+B,IAAI;AACtE;AACA;AACA,0DAA0D;AAC1D,SAAS,mEAAqB;AAC9B,MAAM;AACN;AACA,CAAC;AACO;AACR,sD;;;;;;;;;;;;;;;;;;;;;;;;;;;ACf2C;AACV;AACH;AACC;AACK;AACA;AACN;AACO;AACA;AACH;AACkE;AACpG;AACA;AACA,gGAAyC,8BAA8B,EAAE;AACzE;AACA;AACA;AACA;AACA,gGAAyC,8BAA8B,EAAE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kCAAkC;AAClC;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB;AACpE;AACA;AACA;AACA,8CAA8C,uBAAuB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,qCAAqC,EAAE;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA,iDAAiD,qDAAqD,EAAE,uBAAuB,YAAY,EAAE;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,mBAAmB,EAAE;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,8BAA8B;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,sBAAsB,EAAE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,gCAAgC,EAAE;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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ACR,yD;;;;;;;;;;;;;;;ACfiC;AACjC;AACA;AACA;AACA;AACA;AACA,SAAS,wEAA0B,4BAA4B,IAAI;AACnE;AACA;AACA,uDAAuD;AACvD,SAAS,mEAAqB;AAC9B,MAAM;AACN;AACA,CAAC;AACO;AACR,kD;;;;;;;;;;;;;;;ACfiC;AACjC;AACA;AACA;AACA;AACA;AACA,SAAS,wEAA0B,2BAA2B,IAAI;AAClE;AACA;AACA,sDAAsD;AACtD,SAAS,mEAAqB;AAC9B,MAAM;AACN;AACA,CAAC;AACO;AACR,iD;;;;;;;;;;;;;;;ACfwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mBAAmB,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,SAAS,wEAA0B,2BAA2B,IAAI;AAClE;AACA;AACA,sDAAsD;AACtD,SAAS,mEAAqB;AAC9B,MAAM;AACN;AACA,4BAA4B,4DAAc;AAC1C;AACA;AACA,CAAC;AACO;AACR,iD;;;;;;;;;;;;;;;AChCiC;AACjC;AACA;AACA;AACA;AACA;AACA,SAAS,wEAA0B,8BAA8B,IAAI;AACrE;AACA;AACA,yDAAyD;AACzD,SAAS,mEAAqB;AAC9B,MAAM;AACN;AACA,CAAC;AACO;AACR,oD;;;;;;;;;;;;;;;ACfiC;AACjC;AACA;AACA;AACA;AACA;AACA,SAAS,wEAA0B,kCAAkC,IAAI;AACzE;AACA;AACA,6DAA6D;AAC7D,SAAS,mEAAqB;AAC9B,MAAM;AACN;AACA,CAAC;AACO;AACR,yD;;;;;;;;;;;;;;;ACfiC;AACjC;AACA;AACA;AACA;AACA;AACA,SAAS,wEAA0B,iCAAiC,IAAI;AACxE;AACA;AACA,4DAA4D;AAC5D,SAAS,mEAAqB;AAC9B,MAAM;AACN;AACA,CAAC;AACO;AACR,wD;;;;;;;;;;;;;;;;;;;ACfgC;AACH;AAC7B,iC;;;;;;;;;;;;;;;;;;ACFmB;AACI;AACA;AACwO;AAC/P;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;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","file":"main.js","sourcesContent":["export * from './query-builder';\n//# sourceMappingURL=index.js.map","export * from './query-builder.component';\nexport * from './query-button-group.directive';\nexport * from './query-entity.directive';\nexport * from './query-field.directive';\nexport * from './query-input.directive';\nexport * from './query-operator.directive';\nexport * from './query-switch-group.directive';\nexport * from './query-remove-button.directive';\nexport * from './query-empty-warning.directive';\nexport * from './query-arrow-icon.directive';\n//# sourceMappingURL=index.js.map","import { Directive, TemplateRef } from '@angular/core';\nvar QueryArrowIconDirective = /** @class */ (function () {\n    function QueryArrowIconDirective(template) {\n        this.template = template;\n    }\n    QueryArrowIconDirective.decorators = [\n        { type: Directive, args: [{ selector: '[queryArrowIcon]' },] },\n    ];\n    /** @nocollapse */\n    QueryArrowIconDirective.ctorParameters = function () { return [\n        { type: TemplateRef, },\n    ]; };\n    return QueryArrowIconDirective;\n}());\nexport { QueryArrowIconDirective };\n//# sourceMappingURL=query-arrow-icon.directive.js.map","import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { QueryOperatorDirective } from './query-operator.directive';\nimport { QueryFieldDirective } from './query-field.directive';\nimport { QueryEntityDirective } from './query-entity.directive';\nimport { QuerySwitchGroupDirective } from './query-switch-group.directive';\nimport { QueryButtonGroupDirective } from './query-button-group.directive';\nimport { QueryInputDirective } from './query-input.directive';\nimport { QueryRemoveButtonDirective } from './query-remove-button.directive';\nimport { QueryEmptyWarningDirective } from './query-empty-warning.directive';\nimport { QueryArrowIconDirective } from './query-arrow-icon.directive';\nimport { ChangeDetectorRef, Component, ContentChild, ContentChildren, forwardRef, Input, ViewChild } from '@angular/core';\nexport var CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return QueryBuilderComponent; }),\n    multi: true\n};\nexport var VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return QueryBuilderComponent; }),\n    multi: true\n};\nvar QueryBuilderComponent = /** @class */ (function () {\n    function QueryBuilderComponent(changeDetectorRef) {\n        var _this = this;\n        this.changeDetectorRef = changeDetectorRef;\n        this.defaultClassNames = {\n            arrowIconButton: 'q-arrow-icon-button',\n            arrowIcon: 'q-icon q-arrow-icon',\n            removeIcon: 'q-icon q-remove-icon',\n            addIcon: 'q-icon q-add-icon',\n            button: 'q-button',\n            buttonGroup: 'q-button-group',\n            removeButton: 'q-remove-button',\n            switchGroup: 'q-switch-group',\n            switchLabel: 'q-switch-label',\n            switchRadio: 'q-switch-radio',\n            rightAlign: 'q-right-align',\n            transition: 'q-transition',\n            collapsed: 'q-collapsed',\n            treeContainer: 'q-tree-container',\n            tree: 'q-tree',\n            row: 'q-row',\n            connector: 'q-connector',\n            rule: 'q-rule',\n            ruleSet: 'q-ruleset',\n            invalidRuleSet: 'q-invalid-ruleset',\n            emptyWarning: 'q-empty-warning',\n            fieldControl: 'q-field-control',\n            fieldControlSize: 'q-control-size',\n            entityControl: 'q-entity-control',\n            entityControlSize: 'q-control-size',\n            operatorControl: 'q-operator-control',\n            operatorControlSize: 'q-control-size',\n            inputControl: 'q-input-control',\n            inputControlSize: 'q-control-size'\n        };\n        this.defaultOperatorMap = {\n            string: ['=', '!=', 'contains', 'like'],\n            number: ['=', '!=', '>', '>=', '<', '<='],\n            time: ['=', '!=', '>', '>=', '<', '<='],\n            date: ['=', '!=', '>', '>=', '<', '<='],\n            category: ['=', '!=', 'in', 'not in'],\n            boolean: ['=']\n        };\n        this.data = { condition: 'and', rules: [] };\n        this.allowRuleset = true;\n        this.allowCollapse = false;\n        this.emptyMessage = 'A ruleset cannot be empty. Please add a rule or remove it all together.';\n        this.config = { fields: {} };\n        this.defaultTemplateTypes = [\n            'string', 'number', 'time', 'date', 'category', 'boolean', 'multiselect'\n        ];\n        this.defaultEmptyList = [];\n        this.inputContextCache = new Map();\n        this.operatorContextCache = new Map();\n        this.fieldContextCache = new Map();\n        this.entityContextCache = new Map();\n        this.removeButtonContextCache = new Map();\n        // ----------END----------\n        this.getDisabledState = function () {\n            return _this.disabled;\n        };\n    }\n    // ----------OnInit Implementation----------\n    QueryBuilderComponent.prototype.ngOnInit = function () { };\n    // ----------OnChanges Implementation----------\n    QueryBuilderComponent.prototype.ngOnChanges = function (changes) {\n        var config = this.config;\n        var type = typeof config;\n        if (type === 'object') {\n            this.fields = Object.keys(config.fields).map(function (value) {\n                var field = config.fields[value];\n                field.value = field.value || value;\n                return field;\n            });\n            if (config.entities) {\n                this.entities = Object.keys(config.entities).map(function (value) {\n                    var entity = config.entities[value];\n                    entity.value = entity.value || value;\n                    return entity;\n                });\n            }\n            else {\n                this.entities = null;\n            }\n            this.operatorsCache = {};\n        }\n        else {\n            throw new Error(\"Expected 'config' must be a valid object, got \" + type + \" instead.\");\n        }\n    };\n    // ----------Validator Implementation----------\n    QueryBuilderComponent.prototype.validate = function (control) {\n        var errors = {};\n        var ruleErrorStore = [];\n        var hasErrors = false;\n        if (!this.config.allowEmptyRulesets && this.checkEmptyRuleInRuleset(this.data)) {\n            errors.empty = 'Empty rulesets are not allowed.';\n            hasErrors = true;\n        }\n        this.validateRulesInRuleset(this.data, ruleErrorStore);\n        if (ruleErrorStore.length) {\n            errors.rules = ruleErrorStore;\n            hasErrors = true;\n        }\n        return hasErrors ? errors : null;\n    };\n    Object.defineProperty(QueryBuilderComponent.prototype, \"value\", {\n        // ----------ControlValueAccessor Implementation----------\n        get: function () {\n            return this.data;\n        },\n        set: function (value) {\n            // When component is initialized without a formControl, null is passed to value\n            this.data = value || { condition: 'and', rules: [] };\n            this.handleDataChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    QueryBuilderComponent.prototype.writeValue = function (obj) {\n        this.value = obj;\n    };\n    QueryBuilderComponent.prototype.registerOnChange = function (fn) {\n        var _this = this;\n        this.onChangeCallback = function () { return fn(_this.data); };\n    };\n    QueryBuilderComponent.prototype.registerOnTouched = function (fn) {\n        var _this = this;\n        this.onTouchedCallback = function () { return fn(_this.data); };\n    };\n    QueryBuilderComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this.changeDetectorRef.detectChanges();\n    };\n    QueryBuilderComponent.prototype.findTemplateForRule = function (rule) {\n        var type = this.getInputType(rule.field, rule.operator);\n        if (type) {\n            var queryInput = this.findQueryInput(type);\n            if (queryInput) {\n                return queryInput.template;\n            }\n            else {\n                if (this.defaultTemplateTypes.indexOf(type) === -1) {\n                    console.warn(\"Could not find template for field with type: \" + type);\n                }\n                return null;\n            }\n        }\n    };\n    QueryBuilderComponent.prototype.findQueryInput = function (type) {\n        var templates = this.parentInputTemplates || this.inputTemplates;\n        return templates.find(function (item) { return item.queryInputType === type; });\n    };\n    QueryBuilderComponent.prototype.getOperators = function (field) {\n        if (this.operatorsCache[field]) {\n            return this.operatorsCache[field];\n        }\n        var operators = this.defaultEmptyList;\n        var fieldObject = this.config.fields[field];\n        if (this.config.getOperators) {\n            return this.config.getOperators(field, fieldObject);\n        }\n        var type = fieldObject.type;\n        if (fieldObject && fieldObject.operators) {\n            operators = fieldObject.operators;\n        }\n        else if (type) {\n            operators = (this.operatorMap && this.operatorMap[type]) || this.defaultOperatorMap[type] || this.defaultEmptyList;\n            if (operators.length === 0) {\n                console.warn(\"No operators found for field '\" + field + \"' with type \" + fieldObject.type + \". \" +\n                    \"Please define an 'operators' property on the field or use the 'operatorMap' binding to fix this.\");\n            }\n            if (fieldObject.nullable) {\n                operators = operators.concat(['is null', 'is not null']);\n            }\n        }\n        else {\n            console.warn(\"No 'type' property found on field: '\" + field + \"'\");\n        }\n        // Cache reference to array object, so it won't be computed next time and trigger a rerender.\n        this.operatorsCache[field] = operators;\n        return operators;\n    };\n    QueryBuilderComponent.prototype.getFields = function (entity) {\n        if (this.entities && entity) {\n            return this.fields.filter(function (field) {\n                return field && field.entity === entity;\n            });\n        }\n        else {\n            return this.fields;\n        }\n    };\n    QueryBuilderComponent.prototype.getInputType = function (field, operator) {\n        if (this.config.getInputType) {\n            return this.config.getInputType(field, operator);\n        }\n        var type = this.config.fields[field].type;\n        switch (operator) {\n            case 'is null':\n            case 'is not null':\n                return null; // No displayed component\n            case 'in':\n            case 'not in':\n                return type === 'category' || type === 'boolean' ? 'multiselect' : type;\n            default:\n                return type;\n        }\n    };\n    QueryBuilderComponent.prototype.getOptions = function (field) {\n        if (this.config.getOptions) {\n            return this.config.getOptions(field);\n        }\n        return this.config.fields[field].options || this.defaultEmptyList;\n    };\n    QueryBuilderComponent.prototype.getClassNames = function () {\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var clsLookup = this.classNames ? this.classNames : this.defaultClassNames;\n        var classNames = args.map(function (id) { return clsLookup[id] || _this.defaultClassNames[id]; }).filter(function (c) { return !!c; });\n        return classNames.length ? classNames.join(' ') : null;\n    };\n    QueryBuilderComponent.prototype.getDefaultField = function (entity) {\n        if (!entity) {\n            return null;\n        }\n        else if (entity.defaultField !== undefined) {\n            return this.getDefaultValue(entity.defaultField);\n        }\n        else {\n            var entityFields = this.fields.filter(function (field) {\n                return field && field.entity === entity.value;\n            });\n            if (entityFields && entityFields.length) {\n                return entityFields[0];\n            }\n            else {\n                console.warn(\"No fields found for entity '\" + entity.name + \"'. \" +\n                    \"A 'defaultOperator' is also not specified on the field config. Operator value will default to null.\");\n                return null;\n            }\n        }\n    };\n    QueryBuilderComponent.prototype.getDefaultOperator = function (field) {\n        if (field && field.defaultOperator !== undefined) {\n            return this.getDefaultValue(field.defaultOperator);\n        }\n        else {\n            var operators = this.getOperators(field.value);\n            if (operators && operators.length) {\n                return operators[0];\n            }\n            else {\n                console.warn(\"No operators found for field '\" + field.value + \"'. \" +\n                    \"A 'defaultOperator' is also not specified on the field config. Operator value will default to null.\");\n                return null;\n            }\n        }\n    };\n    QueryBuilderComponent.prototype.addRule = function (parent) {\n        if (this.disabled) {\n            return;\n        }\n        parent = parent || this.data;\n        if (this.config.addRule) {\n            this.config.addRule(parent);\n        }\n        else {\n            var field = this.fields[0];\n            parent.rules = parent.rules.concat([{\n                    field: field.value,\n                    operator: this.getDefaultOperator(field),\n                    value: this.getDefaultValue(field.defaultValue),\n                    entity: field.entity\n                }]);\n        }\n        this.handleTouched();\n        this.handleDataChange();\n    };\n    QueryBuilderComponent.prototype.removeRule = function (rule, parent) {\n        if (this.disabled) {\n            return;\n        }\n        parent = parent || this.data;\n        if (this.config.removeRule) {\n            this.config.removeRule(rule, parent);\n        }\n        else {\n            parent.rules = parent.rules.filter(function (r) { return r !== rule; });\n        }\n        this.inputContextCache.delete(rule);\n        this.operatorContextCache.delete(rule);\n        this.fieldContextCache.delete(rule);\n        this.entityContextCache.delete(rule);\n        this.removeButtonContextCache.delete(rule);\n        this.handleTouched();\n        this.handleDataChange();\n    };\n    QueryBuilderComponent.prototype.addRuleSet = function (parent) {\n        if (this.disabled) {\n            return;\n        }\n        parent = parent || this.data;\n        if (this.config.addRuleSet) {\n            this.config.addRuleSet(parent);\n        }\n        else {\n            parent.rules = parent.rules.concat([{ condition: 'and', rules: [] }]);\n        }\n        this.handleTouched();\n        this.handleDataChange();\n    };\n    QueryBuilderComponent.prototype.removeRuleSet = function (ruleset, parent) {\n        if (this.disabled) {\n            return;\n        }\n        ruleset = ruleset || this.data;\n        parent = parent || this.parentValue;\n        if (this.config.removeRuleSet) {\n            this.config.removeRuleSet(ruleset, parent);\n        }\n        else {\n            parent.rules = parent.rules.filter(function (r) { return r !== ruleset; });\n        }\n        this.handleTouched();\n        this.handleDataChange();\n    };\n    QueryBuilderComponent.prototype.transitionEnd = function (e) {\n        this.treeContainer.nativeElement.style.maxHeight = null;\n    };\n    QueryBuilderComponent.prototype.toggleCollapse = function () {\n        var _this = this;\n        this.computedTreeContainerHeight();\n        setTimeout(function () {\n            _this.data.collapsed = !_this.data.collapsed;\n        }, 100);\n    };\n    QueryBuilderComponent.prototype.computedTreeContainerHeight = function () {\n        var nativeElement = this.treeContainer.nativeElement;\n        if (nativeElement && nativeElement.firstElementChild) {\n            nativeElement.style.maxHeight = (nativeElement.firstElementChild.clientHeight + 8) + 'px';\n        }\n    };\n    QueryBuilderComponent.prototype.changeCondition = function (value) {\n        if (this.disabled) {\n            return;\n        }\n        this.data.condition = value;\n        this.handleTouched();\n        this.handleDataChange();\n    };\n    QueryBuilderComponent.prototype.changeOperator = function (rule) {\n        if (this.disabled) {\n            return;\n        }\n        if (this.config.coerceValueForOperator) {\n            rule.value = this.config.coerceValueForOperator(rule.operator, rule.value, rule);\n        }\n        else {\n            rule.value = this.coerceValueForOperator(rule.operator, rule.value, rule);\n        }\n        this.handleTouched();\n        this.handleDataChange();\n    };\n    QueryBuilderComponent.prototype.coerceValueForOperator = function (operator, value, rule) {\n        var inputType = this.getInputType(rule.field, operator);\n        if (inputType === 'multiselect' && !Array.isArray(value)) {\n            return [value];\n        }\n        return value;\n    };\n    QueryBuilderComponent.prototype.changeInput = function () {\n        if (this.disabled) {\n            return;\n        }\n        this.handleTouched();\n        this.handleDataChange();\n    };\n    QueryBuilderComponent.prototype.changeField = function (fieldValue, rule) {\n        if (this.disabled) {\n            return;\n        }\n        var field = this.config.fields[fieldValue];\n        if (field && field.defaultValue !== undefined) {\n            rule.value = this.getDefaultValue(field.defaultValue);\n        }\n        else {\n            delete rule.value;\n        }\n        rule.operator = this.getDefaultOperator(field);\n        // Create new context objects so templates will automatically update\n        this.inputContextCache.delete(rule);\n        this.operatorContextCache.delete(rule);\n        this.fieldContextCache.delete(rule);\n        this.entityContextCache.delete(rule);\n        this.getInputContext(rule);\n        this.getFieldContext(rule);\n        this.getOperatorContext(rule);\n        this.getEntityContext(rule);\n        this.handleTouched();\n        this.handleDataChange();\n    };\n    QueryBuilderComponent.prototype.changeEntity = function (entityValue, rule) {\n        if (this.disabled) {\n            return;\n        }\n        var entity = this.entities.find(function (e) { return e.value === entityValue; });\n        var defaultField = this.getDefaultField(entity);\n        if (defaultField) {\n            this.changeField(defaultField.value, rule);\n        }\n        else {\n            this.handleTouched();\n            this.handleDataChange();\n        }\n    };\n    QueryBuilderComponent.prototype.getDefaultValue = function (defaultValue) {\n        switch (typeof defaultValue) {\n            case 'function':\n                return defaultValue();\n            default:\n                return defaultValue;\n        }\n    };\n    QueryBuilderComponent.prototype.getOperatorTemplate = function () {\n        var t = this.parentOperatorTemplate || this.operatorTemplate;\n        return t ? t.template : null;\n    };\n    QueryBuilderComponent.prototype.getFieldTemplate = function () {\n        var t = this.parentFieldTemplate || this.fieldTemplate;\n        return t ? t.template : null;\n    };\n    QueryBuilderComponent.prototype.getEntityTemplate = function () {\n        var t = this.parentEntityTemplate || this.entityTemplate;\n        return t ? t.template : null;\n    };\n    QueryBuilderComponent.prototype.getArrowIconTemplate = function () {\n        var t = this.parentArrowIconTemplate || this.arrowIconTemplate;\n        return t ? t.template : null;\n    };\n    QueryBuilderComponent.prototype.getButtonGroupTemplate = function () {\n        var t = this.parentButtonGroupTemplate || this.buttonGroupTemplate;\n        return t ? t.template : null;\n    };\n    QueryBuilderComponent.prototype.getSwitchGroupTemplate = function () {\n        var t = this.parentSwitchGroupTemplate || this.switchGroupTemplate;\n        return t ? t.template : null;\n    };\n    QueryBuilderComponent.prototype.getRemoveButtonTemplate = function () {\n        var t = this.parentRemoveButtonTemplate || this.removeButtonTemplate;\n        return t ? t.template : null;\n    };\n    QueryBuilderComponent.prototype.getEmptyWarningTemplate = function () {\n        var t = this.parentEmptyWarningTemplate || this.emptyWarningTemplate;\n        return t ? t.template : null;\n    };\n    QueryBuilderComponent.prototype.getQueryItemClassName = function (local) {\n        var cls = this.getClassNames('row', 'connector', 'transition');\n        cls += ' ' + this.getClassNames(local.ruleset ? 'ruleSet' : 'rule');\n        if (local.invalid) {\n            cls += ' ' + this.getClassNames('invalidRuleSet');\n        }\n        return cls;\n    };\n    QueryBuilderComponent.prototype.getButtonGroupContext = function () {\n        if (!this.buttonGroupContext) {\n            this.buttonGroupContext = {\n                addRule: this.addRule.bind(this),\n                addRuleSet: this.allowRuleset && this.addRuleSet.bind(this),\n                removeRuleSet: this.allowRuleset && this.parentValue && this.removeRuleSet.bind(this),\n                getDisabledState: this.getDisabledState,\n                $implicit: this.data\n            };\n        }\n        return this.buttonGroupContext;\n    };\n    QueryBuilderComponent.prototype.getRemoveButtonContext = function (rule) {\n        if (!this.removeButtonContextCache.has(rule)) {\n            this.removeButtonContextCache.set(rule, {\n                removeRule: this.removeRule.bind(this),\n                getDisabledState: this.getDisabledState,\n                $implicit: rule\n            });\n        }\n        return this.removeButtonContextCache.get(rule);\n    };\n    QueryBuilderComponent.prototype.getFieldContext = function (rule) {\n        if (!this.fieldContextCache.has(rule)) {\n            this.fieldContextCache.set(rule, {\n                onChange: this.changeField.bind(this),\n                getFields: this.getFields.bind(this),\n                getDisabledState: this.getDisabledState,\n                fields: this.fields,\n                $implicit: rule\n            });\n        }\n        return this.fieldContextCache.get(rule);\n    };\n    QueryBuilderComponent.prototype.getEntityContext = function (rule) {\n        if (!this.entityContextCache.has(rule)) {\n            this.entityContextCache.set(rule, {\n                onChange: this.changeEntity.bind(this),\n                getDisabledState: this.getDisabledState,\n                entities: this.entities,\n                $implicit: rule\n            });\n        }\n        return this.entityContextCache.get(rule);\n    };\n    QueryBuilderComponent.prototype.getSwitchGroupContext = function () {\n        return {\n            onChange: this.changeCondition.bind(this),\n            getDisabledState: this.getDisabledState,\n            $implicit: this.data\n        };\n    };\n    QueryBuilderComponent.prototype.getArrowIconContext = function () {\n        return {\n            getDisabledState: this.getDisabledState,\n            $implicit: this.data\n        };\n    };\n    QueryBuilderComponent.prototype.getEmptyWarningContext = function () {\n        return {\n            getDisabledState: this.getDisabledState,\n            message: this.emptyMessage,\n            $implicit: this.data\n        };\n    };\n    QueryBuilderComponent.prototype.getOperatorContext = function (rule) {\n        if (!this.operatorContextCache.has(rule)) {\n            this.operatorContextCache.set(rule, {\n                onChange: this.changeOperator.bind(this),\n                getDisabledState: this.getDisabledState,\n                operators: this.getOperators(rule.field),\n                $implicit: rule\n            });\n        }\n        return this.operatorContextCache.get(rule);\n    };\n    QueryBuilderComponent.prototype.getInputContext = function (rule) {\n        if (!this.inputContextCache.has(rule)) {\n            this.inputContextCache.set(rule, {\n                onChange: this.changeInput.bind(this),\n                getDisabledState: this.getDisabledState,\n                options: this.getOptions(rule.field),\n                field: this.config.fields[rule.field],\n                $implicit: rule\n            });\n        }\n        return this.inputContextCache.get(rule);\n    };\n    QueryBuilderComponent.prototype.checkEmptyRuleInRuleset = function (ruleset) {\n        var _this = this;\n        if (!ruleset || !ruleset.rules || ruleset.rules.length === 0) {\n            return true;\n        }\n        else {\n            return ruleset.rules.some(function (item) {\n                if (item.rules) {\n                    return _this.checkEmptyRuleInRuleset(item);\n                }\n                else {\n                    return false;\n                }\n            });\n        }\n    };\n    QueryBuilderComponent.prototype.validateRulesInRuleset = function (ruleset, errorStore) {\n        var _this = this;\n        if (ruleset && ruleset.rules && ruleset.rules.length > 0) {\n            ruleset.rules.forEach(function (item) {\n                if (item.rules) {\n                    return _this.validateRulesInRuleset(item, errorStore);\n                }\n                else if (item.field) {\n                    var field = _this.config.fields[item.field];\n                    if (field && field.validator && field.validator.apply) {\n                        var error = field.validator(item, ruleset);\n                        if (error != null) {\n                            errorStore.push(error);\n                        }\n                    }\n                }\n            });\n        }\n    };\n    QueryBuilderComponent.prototype.handleDataChange = function () {\n        this.changeDetectorRef.markForCheck();\n        if (this.onChangeCallback) {\n            this.onChangeCallback();\n        }\n        if (this.parentChangeCallback) {\n            this.parentChangeCallback();\n        }\n    };\n    QueryBuilderComponent.prototype.handleTouched = function () {\n        if (this.onTouchedCallback) {\n            this.onTouchedCallback();\n        }\n        if (this.parentTouchedCallback) {\n            this.parentTouchedCallback();\n        }\n    };\n    QueryBuilderComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'query-builder',\n                    template: \"\\n    <div [ngClass]=\\\"getClassNames('switchRow')\\\">\\n      <ng-template #defaultArrowIcon>\\n        <i [ngClass]=\\\"getClassNames('arrowIcon')\\\"></i>\\n      </ng-template>\\n\\n      <a *ngIf=\\\"allowCollapse\\\" (click)=\\\"toggleCollapse()\\\" [ngClass]=\\\"getClassNames('arrowIconButton', data.collapsed ? 'collapsed' : null)\\\">\\n        <ng-container *ngIf=\\\"getArrowIconTemplate() as template; else defaultArrowIcon\\\">\\n          <ng-container *ngTemplateOutlet=\\\"template; context: getArrowIconContext()\\\"></ng-container>\\n        </ng-container>\\n      </a>\\n\\n      <ng-container *ngIf=\\\"getButtonGroupTemplate() as template; else defaultButtonGroup\\\">\\n        <div [ngClass]=\\\"getClassNames('buttonGroup', 'rightAlign')\\\">\\n          <ng-container *ngTemplateOutlet=\\\"template; context: getButtonGroupContext()\\\"></ng-container>\\n        </div>\\n      </ng-container>\\n\\n      <ng-template #defaultButtonGroup>\\n        <div [ngClass]=\\\"getClassNames('buttonGroup', 'rightAlign')\\\">\\n          <button (click)=\\\"addRule()\\\" [ngClass]=\\\"getClassNames('button')\\\" [disabled]=disabled>\\n            <i [ngClass]=\\\"getClassNames('addIcon')\\\"></i> Rule\\n          </button>\\n          <button (click)=\\\"addRuleSet()\\\" [ngClass]=\\\"getClassNames('button')\\\" *ngIf=\\\"allowRuleset\\\" [disabled]=disabled>\\n            <i [ngClass]=\\\"getClassNames('addIcon')\\\"></i> Ruleset\\n          </button>\\n          <ng-container *ngIf=\\\"!!parentValue && allowRuleset\\\">\\n            <button (click)=\\\"removeRuleSet()\\\" [ngClass]=\\\"getClassNames('button', 'removeButton')\\\" [disabled]=disabled>\\n              <i [ngClass]=\\\"getClassNames('removeIcon')\\\"></i>\\n            </button>\\n          </ng-container>\\n        </div>\\n      </ng-template>\\n\\n      <ng-container *ngIf=\\\"getSwitchGroupTemplate() as template; else defaultSwitchGroup\\\">\\n        <ng-container *ngTemplateOutlet=\\\"template; context: getSwitchGroupContext()\\\"></ng-container>\\n      </ng-container>\\n\\n      <ng-template #defaultSwitchGroup>\\n        <div [ngClass]=\\\"getClassNames('switchGroup', 'transition')\\\" *ngIf=\\\"data\\\">\\n          <div [ngClass]=\\\"getClassNames('switchControl')\\\">\\n            <input type=\\\"radio\\\" [ngClass]=\\\"getClassNames('switchRadio')\\\" [(ngModel)]=\\\"data.condition\\\" [disabled]=disabled value=\\\"and\\\"\\n              #andOption/>\\n            <label (click)=\\\"changeCondition(andOption.value)\\\" [ngClass]=\\\"getClassNames('switchLabel')\\\">AND</label>\\n          </div>\\n          <div [ngClass]=\\\"getClassNames('switchControl')\\\">\\n            <input type=\\\"radio\\\" [ngClass]=\\\"getClassNames('switchRadio')\\\" [(ngModel)]=\\\"data.condition\\\" [disabled]=disabled value=\\\"or\\\"\\n              #orOption/>\\n            <label (click)=\\\"changeCondition(orOption.value)\\\" [ngClass]=\\\"getClassNames('switchLabel')\\\">OR</label>\\n          </div>\\n        </div>\\n      </ng-template>\\n    </div>\\n\\n    <div #treeContainer (transitionend)=\\\"transitionEnd($event)\\\" [ngClass]=\\\"getClassNames('treeContainer', data.collapsed ? 'collapsed' : null)\\\">\\n      <ul [ngClass]=\\\"getClassNames('tree')\\\" *ngIf=\\\"data && data.rules\\\">\\n        <ng-container *ngFor=\\\"let rule of data.rules\\\">\\n          <ng-container *ngIf=\\\"{ruleset: !!rule.rules, invalid: !config.allowEmptyRulesets && rule.rules && rule.rules.length === 0} as local\\\">\\n            <li [ngClass]=\\\"getQueryItemClassName(local)\\\">\\n              <ng-container *ngIf=\\\"!local.ruleset\\\">\\n\\n                <ng-container *ngIf=\\\"getRemoveButtonTemplate() as template; else defaultRemoveButton\\\">\\n                  <div [ngClass]=\\\"getClassNames('buttonGroup', 'rightAlign')\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"template; context: getRemoveButtonContext(rule)\\\"></ng-container>\\n                  </div>\\n                </ng-container>\\n\\n                <ng-template #defaultRemoveButton>\\n                  <div [ngClass]=\\\"getClassNames('removeButtonSize', 'rightAlign')\\\">\\n                    <button [ngClass]=\\\"getClassNames('button', 'removeButton')\\\" (click)=\\\"removeRule(rule, data)\\\" [disabled]=disabled>\\n                      <i [ngClass]=\\\"getClassNames('removeIcon')\\\"></i>\\n                    </button>\\n                  </div>\\n                </ng-template>\\n\\n                <div *ngIf=\\\"entities?.length > 0\\\" class=\\\"q-inline-block-display\\\">\\n                  <ng-container *ngIf=\\\"getEntityTemplate() as template; else defaultEntity\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"template; context: getEntityContext(rule)\\\"></ng-container>\\n                  </ng-container>\\n                </div>\\n\\n                <ng-template #defaultEntity>\\n                  <div [ngClass]=\\\"getClassNames('entityControlSize')\\\">\\n                    <select [ngClass]=\\\"getClassNames('entityControl')\\\" [(ngModel)]=\\\"rule.entity\\\" (ngModelChange)=\\\"changeEntity($event, rule)\\\"\\n                      [disabled]=\\\"disabled\\\">\\n                      <option *ngFor=\\\"let entity of entities\\\" [ngValue]=\\\"entity.value\\\">\\n                        {{entity.name}}\\n                      </option>\\n                    </select>\\n                  </div>\\n                </ng-template>\\n\\n                <ng-container *ngIf=\\\"getFieldTemplate() as template; else defaultField\\\">\\n                  <ng-container *ngTemplateOutlet=\\\"template; context: getFieldContext(rule)\\\"></ng-container>\\n                </ng-container>\\n\\n                <ng-template #defaultField>\\n                  <div [ngClass]=\\\"getClassNames('fieldControlSize')\\\">\\n                    <select [ngClass]=\\\"getClassNames('fieldControl')\\\" [(ngModel)]=\\\"rule.field\\\" (ngModelChange)=\\\"changeField($event, rule)\\\" [disabled]=\\\"disabled\\\">\\n                      <option *ngFor=\\\"let field of getFields(rule.entity)\\\" [ngValue]=\\\"field.value\\\">\\n                        {{field.name}}\\n                      </option>\\n                    </select>\\n                  </div>\\n                </ng-template>\\n\\n                <ng-container *ngIf=\\\"getOperatorTemplate() as template; else defaultOperator\\\">\\n                  <ng-container *ngTemplateOutlet=\\\"template; context: getOperatorContext(rule)\\\"></ng-container>\\n                </ng-container>\\n\\n                <ng-template #defaultOperator>\\n                  <div [ngClass]=\\\"getClassNames('operatorControlSize')\\\">\\n                    <select [ngClass]=\\\"getClassNames('operatorControl')\\\" [(ngModel)]=\\\"rule.operator\\\" (ngModelChange)=\\\"changeOperator(rule)\\\" [disabled]=\\\"disabled\\\">\\n                      <option *ngFor=\\\"let operator of getOperators(rule.field)\\\" [ngValue]=\\\"operator\\\">\\n                        {{operator}}\\n                      </option>\\n                    </select>\\n                  </div>\\n                </ng-template>\\n\\n                <ng-container *ngIf=\\\"findTemplateForRule(rule) as template; else defaultInput\\\">\\n                  <ng-container *ngTemplateOutlet=\\\"template; context: getInputContext(rule)\\\"></ng-container>\\n                </ng-container>\\n\\n                <ng-template #defaultInput>\\n                  <div [ngClass]=\\\"getClassNames('inputControlSize')\\\" [ngSwitch]=\\\"getInputType(rule.field, rule.operator)\\\">\\n                    <input [ngClass]=\\\"getClassNames('inputControl')\\\" [(ngModel)]=\\\"rule.value\\\" (ngModelChange)=\\\"changeInput()\\\" [disabled]=\\\"disabled\\\"\\n                      *ngSwitchCase=\\\"'string'\\\" type=\\\"text\\\">\\n                    <input [ngClass]=\\\"getClassNames('inputControl')\\\" [(ngModel)]=\\\"rule.value\\\" (ngModelChange)=\\\"changeInput()\\\" [disabled]=\\\"disabled\\\"\\n                      *ngSwitchCase=\\\"'number'\\\" type=\\\"number\\\">\\n                    <input [ngClass]=\\\"getClassNames('inputControl')\\\" [(ngModel)]=\\\"rule.value\\\" (ngModelChange)=\\\"changeInput()\\\" [disabled]=\\\"disabled\\\"\\n                      *ngSwitchCase=\\\"'date'\\\" type=\\\"date\\\">\\n                    <input [ngClass]=\\\"getClassNames('inputControl')\\\" [(ngModel)]=\\\"rule.value\\\" (ngModelChange)=\\\"changeInput()\\\" [disabled]=\\\"disabled\\\"\\n                      *ngSwitchCase=\\\"'time'\\\" type=\\\"time\\\">\\n                    <select [ngClass]=\\\"getClassNames('inputControl')\\\" [(ngModel)]=\\\"rule.value\\\" (ngModelChange)=\\\"changeInput()\\\" [disabled]=\\\"disabled\\\"\\n                      *ngSwitchCase=\\\"'category'\\\">\\n                      <option *ngFor=\\\"let opt of getOptions(rule.field)\\\" [ngValue]=\\\"opt.value\\\">\\n                        {{opt.name}}\\n                      </option>\\n                    </select>\\n                    <ng-container *ngSwitchCase=\\\"'multiselect'\\\">\\n                      <select [ngClass]=\\\"getClassNames('inputControl')\\\" [(ngModel)]=\\\"rule.value\\\" (ngModelChange)=\\\"changeInput()\\\" [disabled]=\\\"disabled\\\"\\n                        multiple>\\n                        <option *ngFor=\\\"let opt of getOptions(rule.field)\\\" [ngValue]=\\\"opt.value\\\">\\n                          {{opt.name}}\\n                        </option>\\n                      </select>\\n                    </ng-container>\\n                    <input [ngClass]=\\\"getClassNames('inputControl')\\\" [(ngModel)]=\\\"rule.value\\\" (ngModelChange)=\\\"changeInput()\\\" [disabled]=\\\"disabled\\\"\\n                      *ngSwitchCase=\\\"'boolean'\\\" type=\\\"checkbox\\\">\\n                  </div>\\n                </ng-template>\\n\\n              </ng-container>\\n              <query-builder *ngIf=\\\"local.ruleset\\\" [data]=\\\"rule\\\" [disabled]=\\\"disabled\\\" [parentTouchedCallback]=\\\"parentTouchedCallback || onTouchedCallback\\\"\\n                [parentChangeCallback]=\\\"parentChangeCallback || onChangeCallback\\\" [parentInputTemplates]=\\\"parentInputTemplates || inputTemplates\\\"\\n                [parentOperatorTemplate]=\\\"parentOperatorTemplate || operatorTemplate\\\" [parentFieldTemplate]=\\\"parentFieldTemplate || fieldTemplate\\\"\\n                [parentEntityTemplate]=\\\"parentEntityTemplate || entityTemplate\\\" [parentSwitchGroupTemplate]=\\\"parentSwitchGroupTemplate || switchGroupTemplate\\\"\\n                [parentButtonGroupTemplate]=\\\"parentButtonGroupTemplate || buttonGroupTemplate\\\" [parentRemoveButtonTemplate]=\\\"parentRemoveButtonTemplate || removeButtonTemplate\\\"\\n                [parentEmptyWarningTemplate]=\\\"parentEmptyWarningTemplate || emptyWarningTemplate\\\" [parentArrowIconTemplate]=\\\"parentArrowIconTemplate || arrowIconTemplate\\\"\\n                [parentValue]=\\\"data\\\" [classNames]=\\\"classNames\\\" [config]=\\\"config\\\" [allowRuleset]=\\\"allowRuleset\\\" [allowCollapse]=\\\"allowCollapse\\\"\\n                [emptyMessage]=\\\"emptyMessage\\\" [operatorMap]=\\\"operatorMap\\\">\\n              </query-builder>\\n\\n              <ng-container *ngIf=\\\"getEmptyWarningTemplate() as template; else defaultEmptyWarning\\\">\\n                <ng-container *ngIf=\\\"local.invalid\\\">\\n                  <ng-container *ngTemplateOutlet=\\\"template; context: getEmptyWarningContext()\\\"></ng-container>\\n                </ng-container>\\n              </ng-container>\\n\\n              <ng-template #defaultEmptyWarning>\\n                <p [ngClass]=\\\"getClassNames('emptyWarning')\\\" *ngIf=\\\"local.invalid\\\">\\n                  {{emptyMessage}}\\n                </p>\\n              </ng-template>\\n            </li>\\n          </ng-container>\\n        </ng-container>\\n      </ul>\\n    </div>\\n  \",\n                    styles: [\"\\n    \\uFEFF:host{display:block;width:100%}:host .q-icon{font-style:normal;font-size:12px}:host .q-remove-icon::before{content:'\\u274C'}:host .q-arrow-icon-button{float:left;margin:4px 6px 4px 0;transform:rotate(90deg);transition:linear 0.25s transform;cursor:pointer}:host .q-arrow-icon-button.q-collapsed{transform:rotate(0)}:host .q-arrow-icon::before{content:'\\u25B6'}:host .q-add-icon{color:#555}:host .q-add-icon::before{content:'\\u2795'}:host .q-remove-button{color:#B3415D;width:31px}:host .q-switch-group,:host .q-button-group{font-family:\\\"Lucida Grande\\\", Tahoma, Verdana, sans-serif;overflow:hidden}:host .q-right-align{float:right}:host .q-button{margin-left:8px;padding:0 8px;background-color:white}:host .q-button:disabled{display:none}:host .q-control-size{display:inline-block;vertical-align:top;padding-right:10px}:host .q-input-control,:host .q-operator-control,:host .q-field-control,:host .q-entity-control{display:inline-block;padding:5px 8px;color:#555;background-color:#fff;background-image:none;border:1px solid #ccc;border-radius:4px;box-sizing:border-box;width:auto}:host .q-input-control:disabled,:host .q-operator-control:disabled,:host .q-field-control:disabled,:host .q-entity-control:disabled{border-color:transparent}:host .q-operator-control,:host .q-field-control,:host .q-entity-control,:host .q-input-control:not([type='checkbox']){min-height:32px;-webkit-appearance:none}:host .q-switch-label,:host .q-button{float:left;margin-bottom:0;font-size:14px;line-height:30px;font-weight:normal;text-align:center;text-shadow:none;border:1px solid rgba(0,0,0,0.2);box-sizing:border-box}:host .q-switch-label:hover,:host .q-button:hover{cursor:pointer;background-color:#F0F0F0}:host .q-switch-label{background-color:#e4e4e4;padding:0 8px}:host .q-switch-radio{position:absolute;clip:rect(0, 0, 0, 0);height:1px;width:1px;border:0;overflow:hidden}:host .q-switch-radio:checked+.q-switch-label{border:1px solid #619ed7;background:white;color:#3176b3}:host .q-switch-radio:disabled+.q-switch-label{display:none}:host .q-switch-radio:checked:disabled+.q-switch-label{display:initial;color:initial;cursor:default;border-color:transparent}:host .q-invalid-ruleset{border:1px solid rgba(179,65,93,0.5) !important;background:rgba(179,65,93,0.1) !important}:host .q-empty-warning{color:#8d252e;text-align:center}:host .q-ruleset{border:1px solid #CCC}:host .q-rule{border:1px solid #CCC;background:white}:host .q-transition{-webkit-transition:all 0.1s ease-in-out;-moz-transition:all 0.1s ease-in-out;-ms-transition:all 0.1s ease-in-out;-o-transition:all 0.1s ease-in-out;transition:all 0.1s ease-in-out}:host .q-tree-container{width:100%;overflow:hidden;transition:ease-in 0.25s max-height}:host .q-tree-container.q-collapsed{max-height:0 !important}:host .q-tree{list-style:none;margin:4px 0 2px}:host .q-row{padding:6px 8px;margin-top:6px}:host .q-connector{position:relative}:host .q-connector::before{top:-5px;border-width:0 0 2px 2px}:host .q-connector::after{border-width:0 0 0 2px;top:50%}:host .q-connector::before,:host .q-connector::after{content:'';left:-12px;border-color:#CCC;border-style:solid;width:9px;height:calc(50% + 6px);position:absolute}:host .q-connector:last-child::after{content:none}:host .q-inline-block-display{display:inline-block;vertical-align:top}\\n  \"],\n                    providers: [CONTROL_VALUE_ACCESSOR, VALIDATOR]\n                },] },\n    ];\n    /** @nocollapse */\n    QueryBuilderComponent.ctorParameters = function () { return [\n        { type: ChangeDetectorRef, },\n    ]; };\n    QueryBuilderComponent.propDecorators = {\n        'disabled': [{ type: Input },],\n        'data': [{ type: Input },],\n        'allowRuleset': [{ type: Input },],\n        'allowCollapse': [{ type: Input },],\n        'emptyMessage': [{ type: Input },],\n        'classNames': [{ type: Input },],\n        'operatorMap': [{ type: Input },],\n        'parentValue': [{ type: Input },],\n        'config': [{ type: Input },],\n        'parentArrowIconTemplate': [{ type: Input },],\n        'parentInputTemplates': [{ type: Input },],\n        'parentOperatorTemplate': [{ type: Input },],\n        'parentFieldTemplate': [{ type: Input },],\n        'parentEntityTemplate': [{ type: Input },],\n        'parentSwitchGroupTemplate': [{ type: Input },],\n        'parentButtonGroupTemplate': [{ type: Input },],\n        'parentRemoveButtonTemplate': [{ type: Input },],\n        'parentEmptyWarningTemplate': [{ type: Input },],\n        'parentChangeCallback': [{ type: Input },],\n        'parentTouchedCallback': [{ type: Input },],\n        'treeContainer': [{ type: ViewChild, args: ['treeContainer',] },],\n        'buttonGroupTemplate': [{ type: ContentChild, args: [QueryButtonGroupDirective,] },],\n        'switchGroupTemplate': [{ type: ContentChild, args: [QuerySwitchGroupDirective,] },],\n        'fieldTemplate': [{ type: ContentChild, args: [QueryFieldDirective,] },],\n        'entityTemplate': [{ type: ContentChild, args: [QueryEntityDirective,] },],\n        'operatorTemplate': [{ type: ContentChild, args: [QueryOperatorDirective,] },],\n        'removeButtonTemplate': [{ type: ContentChild, args: [QueryRemoveButtonDirective,] },],\n        'emptyWarningTemplate': [{ type: ContentChild, args: [QueryEmptyWarningDirective,] },],\n        'inputTemplates': [{ type: ContentChildren, args: [QueryInputDirective,] },],\n        'arrowIconTemplate': [{ type: ContentChild, args: [QueryArrowIconDirective,] },],\n        'value': [{ type: Input },],\n    };\n    return QueryBuilderComponent;\n}());\nexport { QueryBuilderComponent };\n//# sourceMappingURL=query-builder.component.js.map","import { Directive, TemplateRef } from '@angular/core';\nvar QueryButtonGroupDirective = /** @class */ (function () {\n    function QueryButtonGroupDirective(template) {\n        this.template = template;\n    }\n    QueryButtonGroupDirective.decorators = [\n        { type: Directive, args: [{ selector: '[queryButtonGroup]' },] },\n    ];\n    /** @nocollapse */\n    QueryButtonGroupDirective.ctorParameters = function () { return [\n        { type: TemplateRef, },\n    ]; };\n    return QueryButtonGroupDirective;\n}());\nexport { QueryButtonGroupDirective };\n//# sourceMappingURL=query-button-group.directive.js.map","import { Directive, TemplateRef } from '@angular/core';\nvar QueryEmptyWarningDirective = /** @class */ (function () {\n    function QueryEmptyWarningDirective(template) {\n        this.template = template;\n    }\n    QueryEmptyWarningDirective.decorators = [\n        { type: Directive, args: [{ selector: '[queryEmptyWarning]' },] },\n    ];\n    /** @nocollapse */\n    QueryEmptyWarningDirective.ctorParameters = function () { return [\n        { type: TemplateRef, },\n    ]; };\n    return QueryEmptyWarningDirective;\n}());\nexport { QueryEmptyWarningDirective };\n//# sourceMappingURL=query-empty-warning.directive.js.map","import { Directive, TemplateRef } from '@angular/core';\nvar QueryEntityDirective = /** @class */ (function () {\n    function QueryEntityDirective(template) {\n        this.template = template;\n    }\n    QueryEntityDirective.decorators = [\n        { type: Directive, args: [{ selector: '[queryEntity]' },] },\n    ];\n    /** @nocollapse */\n    QueryEntityDirective.ctorParameters = function () { return [\n        { type: TemplateRef, },\n    ]; };\n    return QueryEntityDirective;\n}());\nexport { QueryEntityDirective };\n//# sourceMappingURL=query-entity.directive.js.map","import { Directive, TemplateRef } from '@angular/core';\nvar QueryFieldDirective = /** @class */ (function () {\n    function QueryFieldDirective(template) {\n        this.template = template;\n    }\n    QueryFieldDirective.decorators = [\n        { type: Directive, args: [{ selector: '[queryField]' },] },\n    ];\n    /** @nocollapse */\n    QueryFieldDirective.ctorParameters = function () { return [\n        { type: TemplateRef, },\n    ]; };\n    return QueryFieldDirective;\n}());\nexport { QueryFieldDirective };\n//# sourceMappingURL=query-field.directive.js.map","import { Directive, Input, TemplateRef } from '@angular/core';\nvar QueryInputDirective = /** @class */ (function () {\n    function QueryInputDirective(template) {\n        this.template = template;\n    }\n    Object.defineProperty(QueryInputDirective.prototype, \"queryInputType\", {\n        /** Unique name for query input type. */\n        get: function () { return this._type; },\n        set: function (value) {\n            // If the directive is set without a type (updated programatically), then this setter will\n            // trigger with an empty string and should not overwrite the programatically set value.\n            if (!value) {\n                return;\n            }\n            this._type = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    QueryInputDirective.decorators = [\n        { type: Directive, args: [{ selector: '[queryInput]' },] },\n    ];\n    /** @nocollapse */\n    QueryInputDirective.ctorParameters = function () { return [\n        { type: TemplateRef, },\n    ]; };\n    QueryInputDirective.propDecorators = {\n        'queryInputType': [{ type: Input },],\n    };\n    return QueryInputDirective;\n}());\nexport { QueryInputDirective };\n//# sourceMappingURL=query-input.directive.js.map","import { Directive, TemplateRef } from '@angular/core';\nvar QueryOperatorDirective = /** @class */ (function () {\n    function QueryOperatorDirective(template) {\n        this.template = template;\n    }\n    QueryOperatorDirective.decorators = [\n        { type: Directive, args: [{ selector: '[queryOperator]' },] },\n    ];\n    /** @nocollapse */\n    QueryOperatorDirective.ctorParameters = function () { return [\n        { type: TemplateRef, },\n    ]; };\n    return QueryOperatorDirective;\n}());\nexport { QueryOperatorDirective };\n//# sourceMappingURL=query-operator.directive.js.map","import { Directive, TemplateRef } from '@angular/core';\nvar QueryRemoveButtonDirective = /** @class */ (function () {\n    function QueryRemoveButtonDirective(template) {\n        this.template = template;\n    }\n    QueryRemoveButtonDirective.decorators = [\n        { type: Directive, args: [{ selector: '[queryRemoveButton]' },] },\n    ];\n    /** @nocollapse */\n    QueryRemoveButtonDirective.ctorParameters = function () { return [\n        { type: TemplateRef, },\n    ]; };\n    return QueryRemoveButtonDirective;\n}());\nexport { QueryRemoveButtonDirective };\n//# sourceMappingURL=query-remove-button.directive.js.map","import { Directive, TemplateRef } from '@angular/core';\nvar QuerySwitchGroupDirective = /** @class */ (function () {\n    function QuerySwitchGroupDirective(template) {\n        this.template = template;\n    }\n    QuerySwitchGroupDirective.decorators = [\n        { type: Directive, args: [{ selector: '[querySwitchGroup]' },] },\n    ];\n    /** @nocollapse */\n    QuerySwitchGroupDirective.ctorParameters = function () { return [\n        { type: TemplateRef, },\n    ]; };\n    return QuerySwitchGroupDirective;\n}());\nexport { QuerySwitchGroupDirective };\n//# sourceMappingURL=query-switch-group.directive.js.map","export { QueryBuilderComponent } from './components';\nexport { QueryBuilderModule } from './query-builder.module';\n//# sourceMappingURL=index.js.map","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, } from '@angular/forms';\nimport { QueryBuilderComponent, QueryInputDirective, QueryFieldDirective, QueryEntityDirective, QueryOperatorDirective, QueryButtonGroupDirective, QuerySwitchGroupDirective, QueryRemoveButtonDirective, QueryEmptyWarningDirective, QueryArrowIconDirective } from './components';\nvar QueryBuilderModule = /** @class */ (function () {\n    function QueryBuilderModule() {\n    }\n    QueryBuilderModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule\n                    ],\n                    declarations: [\n                        QueryBuilderComponent,\n                        QueryInputDirective,\n                        QueryOperatorDirective,\n                        QueryFieldDirective,\n                        QueryEntityDirective,\n                        QueryButtonGroupDirective,\n                        QuerySwitchGroupDirective,\n                        QueryRemoveButtonDirective,\n                        QueryEmptyWarningDirective,\n                        QueryArrowIconDirective\n                    ],\n                    exports: [\n                        QueryBuilderComponent,\n                        QueryInputDirective,\n                        QueryOperatorDirective,\n                        QueryFieldDirective,\n                        QueryEntityDirective,\n                        QueryButtonGroupDirective,\n                        QuerySwitchGroupDirective,\n                        QueryRemoveButtonDirective,\n                        QueryEmptyWarningDirective,\n                        QueryArrowIconDirective\n                    ]\n                },] },\n    ];\n    /** @nocollapse */\n    QueryBuilderModule.ctorParameters = function () { return []; };\n    return QueryBuilderModule;\n}());\nexport { QueryBuilderModule };\n//# sourceMappingURL=query-builder.module.js.map","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { FormBuilder, FormControl } from '@angular/forms';\nimport { Component } from '@angular/core';\nimport { QueryBuilderClassNames, QueryBuilderConfig } from '../../lib';\n\n@Component({\n  selector: 'app-root',\n  template: `\n  <h2>Vanilla</h2>\n  <br>\n  <query-builder [formControl]='queryCtrl' [config]='currentConfig' [allowRuleset]='allowRuleset' [allowCollapse]='allowCollapse'>\n    <ng-container *queryInput=\"let rule; type: 'textarea'; let getDisabledState=getDisabledState\">\n      <textarea class=\"text-input text-area\" [(ngModel)]=\"rule.value\" [disabled]=getDisabledState()\n        placeholder=\"Custom Textarea\"></textarea>\n    </ng-container>\n  </query-builder>\n  <br>\n  <div>\n    <div class=\"row\">\n      <p class=\"col-6\">Control Valid (Vanilla): {{ queryCtrl.valid }}</p>\n      <div class=\"col-6\">\n        <label><input type=\"checkbox\" (change)=switchModes($event)>Entity Mode</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <p class=\"col-6\">Control Touched (Vanilla): {{ queryCtrl.touched }}</p>\n      <div class=\"col-6\">\n        <label><input type=\"checkbox\" (change)=changeDisabled($event)>Disabled</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-6\">\n        <label><input type=\"checkbox\" [(ngModel)]='allowRuleset'>Allow Ruleset</label>\n      </div>\n      <div class=\"col-6\">\n        <label><input type=\"checkbox\" [(ngModel)]='allowCollapse'>Allow Collapse</label>\n      </div>\n    </div>\n    <textarea class=\"output\">{{query | json}}</textarea>\n  </div>\n  <br>\n  <h2>Custom Material</h2>\n  <br>\n  <mat-card>\n  <query-builder [(ngModel)]='query' [config]='currentConfig' [allowRuleset]='allowRuleset' [allowCollapse]='allowCollapse'>\n    <ng-container *queryButtonGroup=\"let ruleset; let addRule=addRule; let addRuleSet=addRuleSet; let removeRuleSet=removeRuleSet\">\n      <button mat-icon-button color=\"primary\" (click)=\"addRule()\">\n        <mat-icon>add</mat-icon></button>\n      <button mat-icon-button color=\"primary\" *ngIf=\"addRuleSet\" (click)=\"addRuleSet()\">\n        <mat-icon>add_circle_outline</mat-icon></button>\n      <button mat-icon-button color=\"accent\" *ngIf=\"removeRuleSet\" (click)=\"removeRuleSet()\">\n        <mat-icon>remove_circle_outline</mat-icon></button>\n    </ng-container>\n    <ng-container *queryArrowIcon>\n      <mat-icon ngClass=\"mat-arrow-icon\">chevron_right</mat-icon>\n    </ng-container>\n    <ng-container *queryRemoveButton=\"let rule; let removeRule=removeRule\">\n      <button mat-icon-button color=\"accent\" (click)=\"removeRule(rule)\">\n        <mat-icon>remove</mat-icon>\n      </button>\n    </ng-container>\n    <ng-container *querySwitchGroup=\"let ruleset; let onChange=onChange\">\n      <mat-radio-group *ngIf=\"ruleset\" [(ngModel)]=\"ruleset.condition\" (ngModelChange)=\"onChange($event)\">\n        <mat-radio-button [style.padding.px]=\"10\" value=\"and\">And</mat-radio-button>\n        <mat-radio-button [style.padding.px]=\"10\" value=\"or\">Or</mat-radio-button>\n      </mat-radio-group>\n    </ng-container>\n    <ng-container *queryEntity=\"let rule; let entities=entities; let onChange=onChange\">\n      <mat-form-field>\n        <mat-select [(ngModel)]=\"rule.entity\" (ngModelChange)=\"onChange($event, rule)\">\n          <mat-option *ngFor=\"let entity of entities\" [value]=\"entity.value\">\n          {{entity.name}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </ng-container>\n    <ng-container *queryField=\"let rule; let fields=fields; let onChange=onChange; let getFields = getFields\">\n      <mat-form-field>\n        <mat-select [(ngModel)]=\"rule.field\" (ngModelChange)=\"onChange($event, rule)\">\n          <mat-option *ngFor=\"let field of getFields(rule.entity)\" [value]=\"field.value\">\n            {{ field.name }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </ng-container>\n    <ng-container *queryOperator=\"let rule; let operators=operators; let onChange=onChange\">\n      <mat-form-field [style.width.px]=\"90\">\n        <mat-select [(ngModel)]=\"rule.operator\" (ngModelChange)=\"onChange()\">\n          <mat-option *ngFor=\"let value of operators\" [value]=\"value\">\n            {{ value }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </ng-container>\n    <ng-container *queryInput=\"let rule; type: 'boolean'; let onChange=onChange\">\n      <mat-checkbox [(ngModel)]=\"rule.value\" (ngModelChange)=\"onChange()\"></mat-checkbox>\n    </ng-container>\n    <ng-container *queryInput=\"let rule; let field=field; let options=options; type: 'category'; let onChange=onChange\">\n      <mat-form-field>\n        <mat-select [(ngModel)]=\"rule.value\" (ngModelChange)=\"onChange()\">\n          <mat-option *ngFor=\"let opt of options\" [value]=\"opt.value\">\n            {{ opt.name }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </ng-container>\n    <ng-container *queryInput=\"let rule; type: 'date'; let onChange=onChange\">\n      <mat-form-field>\n        <input matInput [matDatepicker]=\"picker\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"onChange()\">\n        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n        <mat-datepicker #picker></mat-datepicker>\n      </mat-form-field>\n    </ng-container>\n    <ng-container *queryInput=\"let rule; let options=options; type: 'multiselect'; let onChange=onChange\">\n      <mat-form-field [style.width.px]=\"300\">\n        <mat-select [(ngModel)]=\"rule.value\" multiple (ngModelChange)=\"onChange()\">\n          <mat-option *ngFor=\"let opt of options\" [value]=\"opt.value\">\n            {{ opt.name }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </ng-container>\n    <ng-container *queryInput=\"let rule; let field=field; type: 'number'; let onChange=onChange\">\n      <mat-form-field [style.width.px]=\"50\">\n        <input matInput [(ngModel)]=\"rule.value\" type=\"number\" (ngModelChange)=\"onChange()\">\n      </mat-form-field>\n    </ng-container>\n    <ng-container *queryInput=\"let rule; let field=field; type: 'string'; let onChange=onChange\">\n      <mat-form-field>\n        <input matInput [(ngModel)]=\"rule.value\" (ngModelChange)=\"onChange()\">\n      </mat-form-field>\n    </ng-container>\n    <ng-container *queryInput=\"let rule; let field=field; type: 'textarea'; let onChange=onChange\">\n      <mat-form-field>\n        <textarea matInput [(ngModel)]=\"rule.value\" (ngModelChange)=\"onChange()\">\n        </textarea>\n      </mat-form-field>\n    </ng-container>\n  </query-builder>\n  </mat-card>\n  <br>\n  <h2>Bootstrap</h2>\n  <br>\n  <query-builder [(ngModel)]='query' [classNames]='bootstrapClassNames' [config]='currentConfig' [allowRuleset]='allowRuleset' [allowCollapse]='allowCollapse'>\n    <div class=\"col-auto\" *queryInput=\"let rule; type: 'textarea'\">\n      <textarea class=\"form-control\" [(ngModel)]=\"rule.value\"\n        placeholder=\"Custom Textarea\"></textarea>\n    </div>\n  </query-builder>\n  `,\n  styles: [`\n  /deep/ html {\n    font: 14px sans-serif;\n    margin: 30px;\n  }\n\n  .mat-icon-button {\n    outline: none;\n  }\n\n  .mat-arrow-icon {\n    outline: none;\n    line-height: 32px;\n  }\n\n  .mat-form-field {\n    padding-left: 5px;\n    padding-right: 5px;\n  }\n\n  .text-input {\n    padding: 4px 8px;\n    border-radius: 4px;\n    border: 1px solid #ccc;\n  }\n\n  .text-area {\n    width: 300px;\n    height: 100px;\n  }\n\n  .output {\n    width: 100%;\n    height: 300px;\n  }\n  `]\n})\nexport class AppComponent {\n  public queryCtrl: FormControl;\n\n  public bootstrapClassNames: QueryBuilderClassNames = {\n    removeIcon: 'fa fa-minus',\n    addIcon: 'fa fa-plus',\n    arrowIcon: 'fa fa-chevron-right px-2',\n    button: 'btn',\n    buttonGroup: 'btn-group',\n    rightAlign: 'order-12 ml-auto',\n    switchRow: 'd-flex px-2',\n    switchGroup: 'd-flex align-items-center',\n    switchRadio: 'custom-control-input',\n    switchLabel: 'custom-control-label',\n    switchControl: 'custom-control custom-radio custom-control-inline',\n    row: 'row p-2 m-1',\n    rule: 'border',\n    ruleSet: 'border',\n    invalidRuleSet: 'alert alert-danger',\n    emptyWarning: 'text-danger mx-auto',\n    operatorControl: 'form-control',\n    operatorControlSize: 'col-auto pr-0',\n    fieldControl: 'form-control',\n    fieldControlSize: 'col-auto pr-0',\n    entityControl: 'form-control',\n    entityControlSize: 'col-auto pr-0',\n    inputControl: 'form-control',\n    inputControlSize: 'col-auto'\n  };\n\n  public query = {\n    condition: 'and',\n    rules: [\n      {field: 'age', operator: '<=', entity: 'physical'},\n      {field: 'birthday', operator: '=', value: new Date(), entity: 'nonphysical'},\n      {\n        condition: 'or',\n        rules: [\n          {field: 'gender', operator: '=', entity: 'physical'},\n          {field: 'occupation', operator: 'in', entity: 'nonphysical'},\n          {field: 'school', operator: 'is null', entity: 'nonphysical'},\n          {field: 'notes', operator: '=', entity: 'nonphysical'}\n        ]\n      }\n    ]\n  };\n\n  public entityConfig: QueryBuilderConfig = {\n    entities: {\n      physical: {name: 'Physical Attributes'},\n      nonphysical: {name: 'Nonphysical Attributes'}\n    },\n    fields: {\n      age: {name: 'Age', type: 'number', entity: 'physical'},\n      gender: {\n        name: 'Gender',\n        entity: 'physical',\n        type: 'category',\n        options: [\n          {name: 'Male', value: 'm'},\n          {name: 'Female', value: 'f'}\n        ]\n      },\n      name: {name: 'Name', type: 'string', entity: 'nonphysical'},\n      notes: {name: 'Notes', type: 'textarea', operators: ['=', '!='], entity: 'nonphysical'},\n      educated: {name: 'College Degree?', type: 'boolean', entity: 'nonphysical'},\n      birthday: {name: 'Birthday', type: 'date', operators: ['=', '<=', '>'],\n        defaultValue: (() => new Date()), entity: 'nonphysical'\n      },\n      school: {name: 'School', type: 'string', nullable: true, entity: 'nonphysical'},\n      occupation: {\n        name: 'Occupation',\n        entity: 'nonphysical',\n        type: 'category',\n        options: [\n          {name: 'Student', value: 'student'},\n          {name: 'Teacher', value: 'teacher'},\n          {name: 'Unemployed', value: 'unemployed'},\n          {name: 'Scientist', value: 'scientist'}\n        ]\n      }\n    }\n  };\n\n  public config: QueryBuilderConfig = {\n    fields: {\n      age: {name: 'Age', type: 'number'},\n      gender: {\n        name: 'Gender',\n        type: 'category',\n        options: [\n          {name: 'Male', value: 'm'},\n          {name: 'Female', value: 'f'}\n        ]\n      },\n      name: {name: 'Name', type: 'string'},\n      notes: {name: 'Notes', type: 'textarea', operators: ['=', '!=']},\n      educated: {name: 'College Degree?', type: 'boolean'},\n      birthday: {name: 'Birthday', type: 'date', operators: ['=', '<=', '>'],\n        defaultValue: (() => new Date())\n      },\n      school: {name: 'School', type: 'string', nullable: true},\n      occupation: {\n        name: 'Occupation',\n        type: 'category',\n        options: [\n          {name: 'Student', value: 'student'},\n          {name: 'Teacher', value: 'teacher'},\n          {name: 'Unemployed', value: 'unemployed'},\n          {name: 'Scientist', value: 'scientist'}\n        ]\n      }\n    }\n  };\n\n  public currentConfig: QueryBuilderConfig;\n  public allowRuleset: boolean = true;\n  public allowCollapse: boolean;\n\n  constructor(\n    private formBuilder: FormBuilder\n  ) {\n    this.queryCtrl = this.formBuilder.control(this.query);\n    this.currentConfig = this.config;\n  }\n\n  switchModes(event: Event) {\n    this.currentConfig = (<HTMLInputElement>event.target).checked ? this.entityConfig : this.config;\n  }\n\n  changeDisabled(event: Event) {\n    (<HTMLInputElement>event.target).checked ? this.queryCtrl.disable() : this.queryCtrl.enable();\n  }\n}\n","import { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\n\nimport { QueryBuilderModule } from '../../lib';\n\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\nimport {\n  MatButtonModule,\n  MatCheckboxModule,\n  MatSelectModule,\n  MatInputModule,\n  MatDatepickerModule,\n  MatNativeDateModule,\n  MatRadioModule,\n  MatIconModule,\n  MatCardModule\n} from '@angular/material';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    QueryBuilderModule,\n    NoopAnimationsModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatSelectModule,\n    MatInputModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatRadioModule,\n    MatIconModule,\n    MatCardModule\n  ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}